#!/bin/bash

HOSTNAME=$(hostname -s)

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)
# Verified on Ubuntu 18.04
export INSTALL_DEPENDENCIES="yes"
#NET_TON_DEV_SRC_TOP_DIR=$(git rev-parse --show-toplevel)
NET_TON_DEV_SRC_TOP_DIR=$(cd "${SCRIPT_DIR}/../" && pwd -P)
export NET_TON_DEV_SRC_TOP_DIR
export TON_GITHUB_REPO="https://github.com/tonlabs/ton-1.git"
export TON_STABLE_GITHUB_COMMIT_ID="a1fd9e05dc6e6c77cb55d54249e8970c3cff7d1e"
export TON_SRC_DIR="${NET_TON_DEV_SRC_TOP_DIR}/ton"
export TON_BUILD_DIR="${TON_SRC_DIR}/build"
export TONOS_CLI_SRC_DIR="${NET_TON_DEV_SRC_TOP_DIR}/tonos-cli"
export TON_WORK_DIR="/var/ton-work"
export UTILS_DIR="${TON_BUILD_DIR}/utils"
export KEYS_DIR="$HOME/ton-keys"
export CONFIGS_DIR="${NET_TON_DEV_SRC_TOP_DIR}/configs"
export ADNL_PORT="30310"
export HOSTNAME
export VALIDATOR_NAME="$HOSTNAME"
export PATH="${UTILS_DIR}:$PATH"
export LITESERVER_IP="127.0.0.1"
export LITESERVER_PORT="3031"
export ENGINE_ADDITIONAL_PARAMS=""


#KEYS
##1 - raw address
export MY_RAW_ADDRESS=$(cat ~/ton-keys/$HOSTNAME.addr)
export MY_PARSED_RAW_ADDRESS=$(echo $MY_RAW_ADDRESS | sed 's/^.\{3\}//')
export MY_X_RAW_ADDRESS=$(printf "x%s" $MY_PARSED_RAW_ADDRESS)
export MY_XX_RAW_ADDRESS=$(printf "0x%s" $MY_PARSED_RAW_ADDRESS)

##2 - election adnl key
export DIR_ELECTION_ADNL_KEY=$(cat ~/ton-keys/elections/$HOSTNAME-election-adnl-key | grep  "created new key" | awk '{print $4}')
export NEW_ADNL_KEY=$(ls -t /var/ton-work/db/keyring | head -n 1)
export SECOND_NEW_ADNL_KEY=$(ls -t /var/ton-work/db/keyring | head -n 2 | tail -n 1)
export PREVIOUS_ADNL_KEY=$(ls -t /var/ton-work/db/keyring | head -n 3 | tail -n 1)
export SECOND_PREVIOUS_ADNL_KEY=$(ls -t /var/ton-work/db/keyring | head -n 4 | tail -n 1)
export PAST_ADNL_KEY=$(ls -t /var/ton-work/db/keyring | head -n 4 | tail -n 1)

##### add here saved adnl keys by lite-client dumptrans

##3 node pubkey
export NODE_PUBKEY=$(cat ~/ton-keys/elections/$HOSTNAME-request-dump2 | grep 'public key' | awk '{print $11}' | tr '[:upper:]' '[:lower:]')
export NODE_X_PUBKEY=$(printf "0x%s" "$NODE_PUBKEY")

##4 msig public key
export MSIG_PUBLIC_KEY=$(cat ~/ton-keys/msig.keys.json | grep 'public' | awk '{print $2}' | tr -d '"' | tr -d ',')
export MSIG_X_PUBLICKEY=$(printf "0x%s" "$MSIG_PUBLIC_KEY")
export MSIG_KEYS_JSON=$(cat ~/ton-keys/msig.keys.json)

##5 safemultisigwallet files
export SAFEMULTISIGWALLET_ABI_JSON="~/net.ton.dev/ton-labs-contracts/solidity/safemultisig/SafeMultisigWallet.abi.json"
export SAFEMULTISIGWALLET_TVC="~/net.ton.dev/ton-labs-contracts/solidity/safemultisig/SafeMultisigWallet.tvc"

#ACCOUNT
#1 - general info
export MY_ACCOUNT=$(cd ~/net.ton.dev/ton/build/lite-client && ./lite-client -p ~/ton-keys/liteserver.pub -a 127.0.0.1:3031 -rc "getaccount ${MY_RAW_ADDRESS}" -rc 'quit' 2>/dev/null)
export MY_ACCOUNT_STATUS=$(echo "$MY_ACCOUNT" | grep account | awk 'FNR == 3 {print $1}' | perl -ne '/state:\(account_(\S+)/ && print $1')
export LAST_TRANS_LT=$(echo "$MY_ACCOUNT" | grep account | awk 'FNR == 2 {print $2}' | tr -d 'last_trans_lt:')
export LAST_TX_UNIXTIME=$(echo "$MY_ACCOUNT" | grep last_paid | awk '{print $4}' | tr -d 'last_paid:')
export LAST_TX_HUMANTIME=$(date -d @"$LAST_TX_UNIXTIME")

#PARAMETERS
export GETCONFIG15=$(cd ~/net.ton.dev/ton/build/lite-client && ./lite-client -p ~/ton-keys/liteserver.pub -a 127.0.0.1:3031 -rc 'getconfig 15' -rc 'quit' 2>/dev/null)
export GETCONFIG32=$(cd ~/net.ton.dev/ton/build/lite-client && ./lite-client -p ~/ton-keys/liteserver.pub -a 127.0.0.1:3031 -rc 'getconfig 32' -rc 'quit' 2>/dev/null)
export GETCONFIG34=$(cd ~/net.ton.dev/ton/build/lite-client && ./lite-client -p ~/ton-keys/liteserver.pub -a 127.0.0.1:3031 -rc 'getconfig 34' -rc 'quit' 2>/dev/null)
export GETCONFIG36=$(cd ~/net.ton.dev/ton/build/lite-client && ./lite-client -p ~/ton-keys/liteserver.pub -a 127.0.0.1:3031 -rc 'getconfig 36' -rc 'quit' 2>/dev/null)

#2 - balance
export MY_NANO_BALANCE=$(echo "$MY_ACCOUNT" | tail -n 1 | tr -d '=''ng' | awk '{print $4}')
export MY_BALANCE=$(echo "scale=9; $MY_NANO_BALANCE"/1000000000 | bc -l)

#TIME
##0 - get current time in unix and human time
export CURRENT_UNIXTIME=$(date +%s)
export CURRENT_HUMANTIME=$(date)

##1 - get time variables from p15
###1A - election time variables
export ELECTION_START_BEFORE=$(echo "${GETCONFIG15}" | awk 'FNR == 4 {print $5}' | tr -d 'elections_start_before:')
export ELECTION_END_BEFORE=$(echo "$GETCONFIG15}" | awk 'FNR == 4 {print $6}' | tr -d 'elections_end_before:')

##1B - duration of validation cycle
export CYCLE_DURATION=$(echo "${GETCONFIG15}" | awk 'FNR == 4 {print $4}' | tr -d 'validators_elected_for:')

##2 - get time variables from p34
###2A - get current validation
export CURRENT_VALIDATION_SINCE_UNIXTIME=$(echo "${GETCONFIG34}" | grep time | awk '{print $2}' | tr -d 'utime_since:')
export CURRENT_VALIDATION_UNTIL_UNIXTIME=$(echo "{$GETCONFIG34}" | grep time | awk '{print $3}' | tr -d 'utime_until:')

export CURRENT_VALIDATION_SINCE_HUMANTIME=$(date -d @"$CURRENT_VALIDATION_SINCE_UNIXTIME")
export CURRENT_VALIDATION_UNTIL_HUMANTIME=$(date -d @"$CURRENT_VALIDATION_UNTIL_UNIXTIME")

###2B - calculate previous validation cycle
export PREVIOUS_VALIDATION_SINCE_UNIXTIME=$(expr $CURRENT_VALIDATION_SINCE_UNIXTIME - $CYCLE_DURATION)
export PREVIOUS_VALIDATION_UNTIL_UNIXTIME=$(expr $CURRENT_VALIDATION_UNTIL_UNIXTIME - $CYCLE_DURATION)

export PREVIOUS_VALIDATION_SINCE_HUMANTIME=$(date -d @"$PREVIOUS_VALIDATION_SINCE_UNIXTIME")
export PREVIOUS_VALIDATION_UNTIL_HUMANTIME=$(date -d @"$PREVIOUS_VALIDATION_UNTIL_UNIXTIME")

###2C - calculate next validation cycle
export NEXT_VALIDATION_SINCE_UNIXTIME=$(expr $CURRENT_VALIDATION_SINCE_UNIXTIME + $CYCLE_DURATION)
export NEXT_VALIDATION_UNTIL_UNIXTIME=$(expr $CURRENT_VALIDATION_UNTIL_UNIXTIME + $CYCLE_DURATION)

export NEXT_VALIDATION_SINCE_HUMANTIME=$(date -d @"$NEXT_VALIDATION_SINCE_UNIXTIME")
export NEXT_VALIDATION_UNTIL_HUMANTIME=$(date -d @"$NEXT_VALIDATION_UNTIL_UNIXTIME")

##4 - calculate election cycles
###4A - calculate previous election start/end in unixtime and active-election-id
export PREVIOUS_ACTIVE_ELECTION_ID=$(expr $CURRENT_VALIDATION_UNTIL_UNIXTIME - $CYCLE_DURATION)
export PREVIOUS_ELECTION_SINCE_UNIXTIME=$(expr $CURRENT_VALIDATION_UNTIL_UNIXTIME - $ELECTION_START_BEFORE - $CYCLE_DURATION)
export PREVIOUS_ELECTION_UNTIL_UNIXTIME=$(expr $CURRENT_VALIDATION_UNTIL_UNIXTIME - $ELECTION_END_BEFORE - $CYCLE_DURATION)

export PREVIOUS_ELECTION_SINCE_HUMANTIME=$(date -d @"$PREVIOUS_ELECTION_SINCE_UNIXTIME")
export PREVIOUS_ELECTION_UNTIL_HUMANTIME=$(date -d @"$PREVIOUS_ELECTION_UNTIL_UNIXTIME")

###4B - calculate upcoming election start/end and active-election-id
export CURRENT_ACTIVE_ELECTION_ID=$CURRENT_VALIDATION_UNTIL_UNIXTIME
export CURRENT_ELECTION_SINCE_UNIXTIME=$(expr $CURRENT_VALIDATION_UNTIL_UNIXTIME - $ELECTION_START_BEFORE)
export CURRENT_ELECTION_UNTIL_UNIXTIME=$(expr $CURRENT_VALIDATION_UNTIL_UNIXTIME - $ELECTION_END_BEFORE)

export CURRENT_ELECTION_SINCE_HUMANTIME=$(date -d @"$CURRENT_ELECTION_SINCE_UNIXTIME")
export CURRENT_ELECTION_UNTIL_HUMANTIME=$(date -d @"$CURRENT_ELECTION_UNTIL_UNIXTIME")

###4C - calculate next election start/end in and active-election-id
export NEXT_ACTIVE_ELECTION_ID=$(expr $CURRENT_VALIDATION_UNTIL_UNIXTIME + $CYCLE_DURATION)
export NEXT_ELECTION_SINCE_UNIXTIME=$(expr $CURRENT_VALIDATION_UNTIL_UNIXTIME - $ELECTION_START_BEFORE + $CYCLE_DURATION)
export NEXT_ELECTION_UNTIL_UNIXTIME=$(expr $CURRENT_VALIDATION_UNTIL_UNIXTIME - $ELECTION_END_BEFORE + $CYCLE_DURATION)

export NEXT_ELECTION_SINCE_HUMANTIME=$(date -d @"$NEXT_ELECTION_SINCE_UNIXTIME")
export NEXT_ELECTION_UNTIL_HUMANTIME=$(date -d @"$NEXT_ELECTION_UNTIL_UNIXTIME")

#COLORS
export NO_COLOR='\e[0m'
export RED='\e[31m'
export GREEN='\e[32m'
export YELLOW='\e[33m'
export BLUE='\e[34m'
export CYAN='\e[36m'

export GREEN_BACKGROUND='\e[42m'

#ELECTION
## during election - check election submission from elector
export CHECK_ELECTION_SUBMISSION=$(cd ~/net.ton.dev/ton/build/lite-client && ./lite-client -p ~/ton-keys/liteserver.pub -a 127.0.0.1:3031 -rc "runmethodfull -1:3333333333333333333333333333333333333333333333333333333333333333 participates_in ${NODE_X_PUBKEY}" -rc 'quit' 2>/dev/null | awk 'FNR == 5 {print $3}')

## after election - check whether elected
export CHECK_ELECTION_RESULT_NEW_ADNL_KEY=$(echo "${GETCONFIG36}" | grep $NEW_ADNL_KEY | awk '{print $4}' | tr -d ')' | tr -d 'adnl_addr:x')
export CHECK_ELECTION_RESULT_SECOND_NEW_ADNL_KEY=$(echo "${GETCONFIG36}" | grep $SECOND_NEW_ADNL_KEY | awk '{print $4}' | tr -d ')' | tr -d 'adnl_addr:x')

## after validation cycle begins - check whether validating
export CHECK_VALIDATION_STATUS_NEW_ADNL_KEY=$(echo "${GETCONFIG34}" | grep $NEW_ADNL_KEY | awk '{print $4}' | tr -d ')' | tr -d 'adnl_addr:x')
export CHECK_VALIDATION_STATUS_SECOND_NEW_ADNL_KEY=$(echo "${GETCONFIG34}" | grep $SECOND_NEW_ADNL_KEY | awk '{print $4}' | tr -d ')' | tr -d 'adnl_addr:x')
export CHECK_VALIDATION_STATUS_PREVIOUS_ADNL_KEY=$(echo "${GETCONFIG34}" | grep $PREVIOUS_ADNL_KEY | awk '{print $4}' | tr -d ')' | tr -d 'adnl_addr:x')
export CHECK_VALIDATION_STATUS_SECOND_PREVIOUS_ADNL_KEY=$(echo "${GETCONFIG34}" | grep $SECOND_PREVIOUS_ADNL_KEY | awk '{print $4}' | tr -d ')' | tr -d 'adnl_addr:x')
export CHECK_VALIDATION_STATUS_PAST_ADNL_KEY=$(echo "${GETCONFIG32}" | grep $PAST_ADNL_KEY | awk '{print $4}' | tr -d ')' | tr -d 'adnl_addr:x')

## check election status - if == 0, then election closed, else open
export CHECK_ELECTION_STATUS=$(cd ~/net.ton.dev/ton/build/lite-client && ./lite-client -p ~/ton-keys/liteserver.pub -a 127.0.0.1:3031 -rc "runmethodfull -1:3333333333333333333333333333333333333333333333333333333333333333 active_election_id" -rc 'quit' 2>/dev/null | awk 'FNR == 5 {print $3}')

## check if currently in transition period (after election ends and before new cycle begins) - if != (null), then transition period.
export CHECK_TRANSITION_STATUS=$(echo "${GETCONFIG36}" | awk 'FNR == 4 {print $3}')

##
export CURRENT_MY_WEIGHT=$(echo "${GETCONFIG34}" | grep $NEW_ADNL_KEY | awk '{print $3}' | tr -d 'weight:')
export CURRENT_NETWORK_WEIGHT=$(echo "${GETCONFIG34}" | grep 'total_weight' | awk '{print $6}' | tr -d 'total_weight:')
export CURRENT_MY_WEIGHT_PERCENTAGE=$(echo "scale=9; ${CURRENT_MY_WEIGHT:=1}/${CURRENT_NETWORK_WEIGHT:=1}" | bc -l)

export CURRENT_MY_WEIGHT_TRANSITION=$(echo "${GETCONFIG34}" | grep $PREVIOUS_ADNL_KEY | awk '{print $3}' | tr -d 'weight:')
export CURRENT_MY_WEIGHT_PERCENTAGE_TRANSITION=$(echo "scale=9; ${CURRENT_MY_WEIGHT_TRANSITION:=1}/${CURRENT_NETWORK_WEIGHT:=1}" | bc -l)

## calculate network weight and rewards for next round
export NEXT_MY_WEIGHT=$(echo "${GETCONFIG36}" | grep $NEW_ADNL_KEY | awk '{print $3}' | tr -d 'weight:')
export NEXT_NETWORK_WEIGHT=$(echo "${GETCONFIG36}" | grep 'total_weight' | awk '{print $6}' | tr -d 'total_weight:')
export NEXT_MY_WEIGHT_PERCENTAGE=$(echo "scale=9; ${NEXT_MY_WEIGHT:=1}/${NEXT_NETWORK_WEIGHT:=1}" | bc -l)
export NEXT_MY_STAKED_TOKENS=$(echo "scale=9; ${CHECK_ELECTION_SUBMISSION:=1}/1000000000" | bc -l)

export PREVIOUS_TOTAL_STAKE=$(cd ~/net.ton.dev/ton/build/lite-client && ./lite-client -p ~/ton-keys/liteserver.pub -a 127.0.0.1:3031 -rc "runmethodfull -1:3333333333333333333333333333333333333333333333333333333333333333 past_elections" -rc 'quit' 2>/dev/null | awk 'FNR == 5 {print $8}')
export PREVIOUS_TOTAL_BONUS=$(cd ~/net.ton.dev/ton/build/lite-client && ./lite-client -p ~/ton-keys/liteserver.pub -a 127.0.0.1:3031 -rc "runmethodfull -1:3333333333333333333333333333333333333333333333333333333333333333 past_elections" -rc 'quit' 2>/dev/null | awk 'FNR == 5 {print $9}')
export PREVIOUS_INTEREST_RATE=$(echo "scale=9; ${PREVIOUS_TOTAL_BONUS:=1}/${PREVIOUS_TOTAL_STAKE:=1}" | bc -l)

export EXPECTED_INTEREST_RATE="$PREVIOUS_INTEREST_RATE"
export EXPECTED_MY_TOTAL_BONUS=$(echo "scale=9; ${PREVIOUS_INTEREST_RATE:=1}*${NEXT_MY_STAKED_TOKENS:=1}" | bc -l)

export CURRENT_TOTAL_STAKE=$(cd ~/net.ton.dev/ton/build/lite-client && ./lite-client -p ~/ton-keys/liteserver.pub -a 127.0.0.1:3031 -rc "runmethodfull -1:3333333333333333333333333333333333333333333333333333333333333333 past_elections" -rc 'quit' 2>/dev/null | awk 'FNR == 5 {print $16}')
export CURRENT_TOTAL_BONUS=$(cd ~/net.ton.dev/ton/build/lite-client && ./lite-client -p ~/ton-keys/liteserver.pub -a 127.0.0.1:3031 -rc "runmethodfull -1:3333333333333333333333333333333333333333333333333333333333333333 past_elections" -rc 'quit' 2>/dev/null | awk 'FNR == 5 {print $17}')

export CURRENT_TOTAL_STAKE_TRANSITION=$(cd ~/net.ton.dev/ton/build/lite-client && ./lite-client -p ~/ton-keys/liteserver.pub -a 127.0.0.1:3031 -rc "runmethodfull -1:3333333333333333333333333333333333333333333333333333333333333333 past_elections" -rc 'quit' 2>/dev/null | awk 'FNR == 5 {print $8}')
export CURRENT_TOTAL_BONUS_TRANSITION=$(cd ~/net.ton.dev/ton/build/lite-client && ./lite-client -p ~/ton-keys/liteserver.pub -a 127.0.0.1:3031 -rc "runmethodfull -1:3333333333333333333333333333333333333333333333333333333333333333 past_elections" -rc 'quit' 2>/dev/null | awk 'FNR == 5 {print $9}')

export CURRENT_MY_STAKED_TOKENS=$(echo "scale=9; ${CURRENT_MY_WEIGHT_PERCENTAGE:=1}*${CURRENT_TOTAL_STAKE:=1}/1000000000" | bc -l)
export CURRENT_MY_BONUS=$(echo "scale=9; ${CURRENT_MY_WEIGHT_PERCENTAGE:=1}*${CURRENT_TOTAL_BONUS:=1}/1000000000" | bc -l)

export CURRENT_MY_BONUS_TRANSITION=$(echo "scale=9; ${CURRENT_MY_WEIGHT_PERCENTAGE_TRANSITION:=1}*${CURRENT_TOTAL_BONUS_TRANSITION:=1}/1000000000" | bc -l)

#EXPECTED_TOTAL_BONUS_PERCENTAGE=EXPECTED_TOTAL_BONUS/MYSTAKE
export MY_COMPUTE_REWARD=$(cd ~/net.ton.dev/ton/build/lite-client && ./lite-client -p ~/ton-keys/liteserver.pub -a 127.0.0.1:3031 -rc "runmethodfull -1:3333333333333333333333333333333333333333333333333333333333333333 compute_returned_stake $MY_XX_RAW_ADDRESS" -rc 'quit' 2>/dev/null | awk 'FNR == 5 {print $3}')
